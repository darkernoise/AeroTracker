'''
Created on Oct 22, 2016

@author: Joel Blackthorne

AeroTracker, Copyright (C) 2016 Joel Blackthorne
This file is part of AeroTracker.

AeroTracker is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AeroTracker is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with AeroTracker.  If not, see <http://www.gnu.org/licenses/>.
'''

import time
import multiprocessing as mp
from aero_tracker.network.at_pipe_pool import AT_PipePool
from aero_tracker.params.at_sensor_cluster_params import ATSensorClusterParams
from aero_tracker.common.at_process_base import AT_ProcessBase
from aero_tracker.log.at_logging import AT_Logging
from aero_tracker.network.at_sensor_data_packet import AT_SensorDataPacket
# from aero_tracker.trilateration.at_time_slice_queue import AT_TimeSliceQueue
# from aero_tracker.server.data_proc.at_data_proc_worker_mp_manager import AT_DataProcWorkerMPManager

class AT_DataSorter(AT_ProcessBase):
    '''
    This object reads from the data pipes connected to incoming data socket handler to retrieve
    incoming raw data, sort it by time slices, and then push the consolidated data into
    the trilateration queue.
    '''
    NUM_PIPES = 6 #TODO  This needs to be incremented based on the number of sensor arrays
    SYNCHRONIZE_ON_TIME_DIFF = 0.5
    
    _pipe_pool = AT_PipePool
    _num_pipes = 0
    _rec_cnt = 0
#     _time_slice_queue = AT_TimeSliceQueue
#     _trilat_queue = None
#     _manager_address = ''
#     _manager_port = 0
    _receive_stats_psec = 0
    _packet_timer = None
    
#     @property
#     def manager_address(self):
#         return self.LOCAL_ADDRESS
#     @manager_address.setter
#     def manager_address(self, val):
#         self._manager_address = val
#         return
#     
#     @property
#     def manager_port(self):
#         return self._manager_port
#     @manager_port.setter
#     def manager_port(self, val):
#         self._manager_port = val
#         return
#     
#     @property
#     def trilat_queue(self):
#         return self._trilat_queue
        
    @property
    def pipe_pool(self):
        return self._pipe_pool
    
    def run_clycle(self):
        '''
        Executes within the while is_running loop.
        '''
        if (self._packet_timer == None):
            self._packet_timer = time.time()
        
        no_data = True
#         datpkt = AT_SensorDataPacket
        
        for i in range(0, self._num_pipes):
            conn = self._pipe_pool.parent_conns[i]
            if (conn.poll()):
                data_packet_bytes = conn.recv()
                if (data_packet_bytes != None):
                    no_data = False
                    print(data_packet_bytes)
#                     datpkt = AT_SensorDataPacket.from_packet_bytes(pkt_bytes=data_packet_bytes)
#                     self._time_slice_queue.enqueue(sensor_datpkt=datpkt)
                    
                    self._rec_cnt += 1
                    if (self._rec_cnt >= 100):
                        time_passed = time.time() - self._packet_timer
                        self._receive_stats_psec = self._rec_cnt / time_passed
                        self.log.log3(msg1='Data Sorter received:', 
                            msg2=str(self._rec_cnt) + ' recs', 
                            msg3='at ' + str(self._receive_stats_psec) + ' pkts/sec', 
                            caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)    
                        self._rec_cnt = 0
                        self._packet_timer = time.time()
        
        #attempt a pop if the time slice queue is ready
#         itm = self._time_slice_queue.pop() #TSQueueItem
#         while (itm != None):
#             self.trilat_queue.put(itm)
#             itm = self._time_slice_queue.pop() #TSQueueItem
            
        if (no_data):
            time.sleep(0.1)
        
        return

    def __init__(self, params:ATSensorClusterParams, log_file:str):
        '''
        Constructor
        '''
        super().__init__(params=params, log_file=log_file)
        self._pipe_pool = AT_PipePool(params=params, num_pipes=params.num_sensors)
        self._num_pipes = self._pipe_pool.num_pipes
#         self._time_slice_queue = AT_TimeSliceQueue(params)
        return
    
#     def _get_trilat_queue(self):
#         manager = self._get_worker_manager(client_address=self.manager_address, port=self.manager_port)
#         rval = manager
#         return
#     
#     def _get_worker_manager(self, client_address, port)->AT_DataProcWorkerMPManager:
#         if (self._worker_manager == None):
#             try:
#                 #Get instance of the directory store from the manager
#                 AT_DataProcWorkerMPManager.register_client_methods()
#                 print("Data Proc Mgr Address: ", client_address, " Port: ", str(port))
#                 manager =  AT_DataProcWorkerMPManager(address=(client_address, port), \
#                     authkey=bytearray(self._params.MANAGER_AUTH_KEY,'ascii'))
#                 manager_connected = False
#                 tries = 0
#                 while ((not manager_connected) and (tries < 5)):
#                     try:
#                         manager.connect()
#                         manager_connected = True
#                     except Exception as exi:
#                         self.log.log2(msg1='Could not connect to the Worker Directory Server. Retrying...', msg2=str(exi), caller=self, msgty=AT_Logging.MSG_TYPE_WARNING)
#                         time.sleep(1)
#                         tries += 1
#                 self._worker_manager = manager
#             except Exception as ex:
#                 self.log.log2(msg1='Critical Exception opening data proc mgr to get time slice queue', msg2=str(ex), caller=self, msgty=AT_Logging.MSG_TYPE_ERROR)
#                 raise ex
#         return self._worker_manager
    
    
    
        