'''
Created on Aug 19, 2016

@author: Joel Blackthorne

AeroTracker, Copyright (C) 2016 Joel Blackthorne
This file is part of AeroTracker.

AeroTracker is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AeroTracker is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with AeroTracker.  If not, see <http://www.gnu.org/licenses/>.
'''
import time
import typing
from aero_tracker.common.at_process_base import AT_ProcessBase
from aero_tracker.trilateration.raw_data.ts_queue_item import *
from aero_tracker.sensor.sensor_device import SensorDevice
from aero_tracker.trilateration.at_trilateration import AT_Trilateration
from aero_tracker.trilateration.sphere_coordinates import SphereCoordinates
from aero_tracker.filter.savgol_filter_queue import SavGolFilterQueue
from aero_tracker.log.at_logging import AT_Logging
from aero_tracker.network.at_listener_multicast import AT_ListenerMulticast

class AT_TrilaterationWorker(AT_ProcessBase):
    '''
    Process to receive and manage the trilateration of data.
    
    '''
    MAX_QUEUE_SIZE=200
    LOG_FILE_BASE = '/var/log/aerotracker/at_target_'
    INCOMPLETE_STATUS = 30
    
    _trilat_q = None #Process safe queue for incoming data to trilaterate
    _sensors = None # [SensorDevice]
    _dir_store = None
    _listeners = None
    _filter = None #SavGolFilterQueue
    _incomplete_cnt = 0
    _listener_multicast = None
    _target_id = None
    
    
    @property
    def log_file(self):
        rval = self.LOG_FILE_BASE + 'none'
        if (self._target_id != None):
            rval = self.LOG_FILE_BASE + self._target_id
        return rval
    
    @property
    def queue(self):
        '''
        Trilateration queue is filled with items sorted and popped from the TimeSlice queue.  By
        virtue of being in here, the data is ready to process.
        '''
        return self._trilat_q

    
    def run_clycle(self):
        '''
        Executes within the while is_running loop.
        '''
        
        if (not self.queue.empty()):
            #remove overflowing items if necessary
            self._check_queue_overflow()
            #process queue
            itm = self.queue.get() #type TSQueueItem
            if (self._filter == None):
                dpkt0 = itm.sensors[0].data_pkts[0]
                self._filter = SavGolFilterQueue(cluster_id=dpkt0.cluster_id, params=self._params)
                self._target_id = dpkt0.target_id
                self.set_new_log(self.log_file)
                self._listener_multicast = AT_ListenerMulticast(dir_store=self._dir_store, 
                    target_id=self._target_id, params=self._params, log=self.log)
            
#             print('# Sensors: ', str(len(itm.sensors)), 'First: ', itm.sensors[0].sensor_id)
            if (self.params.ONLY_LOG_SENSOR != None):
                #Debug setting to output the value from a single sensor for logging
                #This setting should be remarked out in the conf file to deactivate
                for snsr in itm.sensors: #array of TSQueueItemSensor
                    first_datapkt = snsr.data_pkts[0]
                    if (first_datapkt.sensor_id == self.params.ONLY_LOG_SENSOR):
                        log_str = ''
                        for dpkt in snsr.data_pkts:
                            log_str = log_str + ',' + first_datapkt.sensor_id + ',' + str(dpkt.filter_dist) + ',' + str(first_datapkt.rssi)
                        log_str = str(first_datapkt.timestamp) + log_str
                        print(log_str)
                        
            elif (len(itm.sensors) >= 4):
                #There must be at least 4 sensors to trilaterate
                
#                 if (self._incomplete_cnt > 0):
#                     self.log.log3(msg1=str(self._incomplete_cnt) + " Incomplete reading from", msg2=str(len(itm.sensors)), msg3='sensors', caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)
#                     self._incomplete_cnt = 0
                    
                sphere_coords_list = []
                dist = 0.0
                log_str = ''
                for snsr in itm.sensors: #array of TSQueueItemSensor
                    dist = AT_SensorDataPacket.average_data_pkts(snsr.data_pkts)
                    #Get property info on the sensor and target from the first data packet
                    first_datapkt = snsr.data_pkts[0]
                    snsr_device = self._get_sensor_device(cluster_id=first_datapkt.cluster_id, sensor_id=first_datapkt.sensor_id)
                    sphr = SphereCoordinates(X=snsr_device.X, Y=snsr_device.Y, Z=snsr_device.Z, \
                        Radius=dist, Differential=0, Name=snsr_device.sensor_id)
                    log_str = log_str + ',' + snsr_device.sensor_id + ',' + str(dist) + ',' + str(first_datapkt.rssi)
                    sphere_coords_list.append(sphr)
                trilat = AT_Trilateration(sphere_coords_list)
                
                #Pre-filtered result printing
                if (self.params.PRINT_PREFILTERED_RESULTS):
                    log_str = str(first_datapkt.timestamp) + ',' + str(trilat.get_result())  + log_str
                    self.log.log2(msg1='Pre-Filter:', msg2=log_str, caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)
                    
                #Listener Update 
                self._listener_multicast.refresh_check()
                #send trilaterated data through secondary filter.  Results are returned when filtered data
                #is available.
                rslts = self._filter.enqueue(slice_ts=first_datapkt.timestamp, coord_xyz=trilat.get_result())
                #Multicast send results
                if (len(rslts) > 0):
                    for rslt in rslts:
                        self._listener_multicast.send(result_line=rslt)
                        #For debugging, you the settings file allows printing filtered results to the screen
                        if (self.params.PRINT_FILTERED_RESULTS):
                            self.log.log2(msg1='Filtered:', msg2=str(rslt), caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)
            else:
                #Not enough readings in time slice.  This may mean that the time slice queue buffer needs to be
                #enlarged or the window reduced
                self._incomplete_cnt += 1
                if (self._incomplete_cnt >= self.INCOMPLETE_STATUS):
                    self.log.log3(msg1=str(self._incomplete_cnt) + " Incomplete reading from", msg2=str(len(itm.sensors)), msg3='sensors', caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)
                    self._incomplete_cnt = 0
        else:
            time.sleep(.2)
        return
    

    def _check_queue_overflow(self):
        num_del = 0
        while (self.queue.qsize() > self.MAX_QUEUE_SIZE):
            itm = self.queue.get()
            num_del += 1
        if (num_del > 0):
            self.log.log3(msg1="Truncated", msg2=str(num_del), msg3='overflow Trilateration Queue Items', caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)
        return
    
    def __init__(self, dir_store, trilat_queue, params):
#         sensor:SensorDevice
        super().__init__(params=params, log_file=self.log_file)
        self._dir_store = dir_store
        self._trilat_q = trilat_queue
        self._listeners = []
        self._sensors = []
        return
    
    def _get_sensor_device(self, cluster_id:str, sensor_id:str)->SensorDevice:
        '''
        Gets the sensor from the local property or the directory store.  
         
        Note: Sometimes this method is called as such a speed that the datastore cannot 
        fulfill the request in time.  Thus, this has error correction to retry.
        '''
        for snsr in self._sensors:
            #snsr = SensorDevice
            if ((snsr.cluster_id == cluster_id) and (snsr.sensor_id == sensor_id)):
                return snsr
        
        #If the code makes it ot here, the sensor needs to be retrieved from the directory server
        tries = 0
        success = False
        snsr = None
        while ((not success) and (tries < 10)):
            try:
                snsr = self._dir_store.get_sensor(cluster_id=cluster_id, sensor_id=sensor_id)
                success = True
            except Exception as exi:
                tries += 1
                if (tries < 10):
                    time.sleep(.02)
                else:
                    self.log.log3(msg1="Data Store Exception:", msg2=str(exi), msg3='Type:' + type(exi).__name__, caller=self, msgty=AT_Logging.MSG_TYPE_DEBUG)
                    raise exi
        if (snsr != None):
            self._sensors.append(snsr)
        return snsr


        